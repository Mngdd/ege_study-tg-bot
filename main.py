import telebot
import os
from datetime import date
from ege_parser import *
from markups import *
from take_a_screenshot import *
from sql_base import *

# ege_choose_state   0 - –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∏—á–µ  1 - –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞  2 - –≤—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞  3 - –ø–æ–∏—Å–∫
# 4 - —Ç–µ–æ—Ä–∏—è –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ 5 - –≤—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–æ—Ä–∏—è
# ege_choose_state —á–∏—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –Ω—É–∂–Ω–∞ –µ—Å–ª–∏ —á–µ

print('—Å–∞–ª–∞–º –∞–ª–µ–π–∫—É–º')

BOT_TOKEN = "5095740599:AAEkSiFF83WwMCo4oWlU8_ejuPG7IusGmOs"
ege_links = []
lol = [f'–∫—Å—Ç–∞ —Å–µ–¥–Ω—è {date.today()}', '—ã—Å—Ç—ã–∫ –ø–∏—à—Å—Ç–µ—Ä', '–±–∏–≥–∞—ç –ø–æ –ø–æ–ª—é –≤–µ—Å–µ–ª–æ –∫–∞–±–∞–Ω—á–∏–∫', '–∫–∞–ø–∏–±–∞—Ä—ã.....',
       '–≤–∞—Ç—Ä—É–∂–∫–∞']
# idk = ['—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', '—á–µ—É', '–∞–π –¥–æ–Ω—Ç –∞–¥–µ—Ä—Å—Ç–µ–Ω–¥', '—á–µ', '–∞–≥–∞ –¥–∞', '–∞?', '–ø–∏—à–∏ —è—Å–Ω–µ–µ',
#        '–Ω–∏—á–µ –Ω–µ –ø–æ–Ω—è–ª', '—á—Ç–æ?', '—è –Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É',
#        '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', '–µ—â–µ —Ä–∞–∑', 'ü•∫', 'ü§Ø']
idk = ['—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', '–ø–∏—à–∏—Ç–µ —è—Å–Ω–µ–µ', '–Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª', '—á—Ç–æ?', '—è –Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞']
ege_names = {
    'math': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ', 'rus': '—Ä—É—Å—Å–∫–æ–º—É', 'inf': '–∏–Ω—Ñ–µ'
}
ege_types_len = {
    'math': 18, 'rus': 27, 'inf': 27
}
bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['GET'])
def dev1(msg):
    bot.send_message(msg.chat.id, f'–∏–Ω—Ñ–∞\n{usr_data(str(msg.from_user.id))}\n{type(msg.from_user.id)}'
                                  f'{usr_get(str(msg.from_user.id), "ege_type")}')


@bot.message_handler(commands=['SET'])
def dev2(msg, change_me=None):
    if str(msg.from_user.id) == '569255452':
        if change_me is None:
            change_me = {
                "USER_ID": 'REDACTED', "ege_type": "REDACTED",
                "ege_choose_state": 0, "ege_links": "REDACTED"
            }
        usr_update(str(msg.from_user.id), change_me)
        bot.send_message(msg.chat.id, f'–æ–±–Ω–æ–≤–∏–ª\n{usr_data(str(msg.from_user.id))}')
    else:
        bot.send_message(msg.chat.id, '–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ª–æ–ª')


@bot.message_handler(commands=['DEL'])
def dev3(msg):
    # if msg.from_user.id == 569255452:
    usr_delete(str(msg.from_user.id))
    bot.send_message(msg.chat.id, f'—Å–Ω–∏–∑—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ\n{usr_data(str(msg.from_user.id))}')
    # else:
    #     bot.send_message(msg.chat.id, '–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ª–æ–ª')


@bot.message_handler(commands=['ege_theory'])
def send_theory(msg):
    bot.reply_to(msg, '–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±–∏—Ä–µ—à—å?', reply_markup=gen_markup_ege_type())
    usr_update(str(msg.from_user.id), {'ege_choose_state': 4})


# @bot.message_handler(commands=['cat'])
# def send_cats(msg):
#     CatPhoto = cat_get()
#     bot.send_message(msg.chat.id, f"—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ—Ç\n{CatPhoto}")
#
#
# @bot.message_handler(commands=['dog'])
# def send_dogs(msg):
#     DogPhoto = dog_get()
#     bot.send_message(msg.chat.id, f"—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–æ–±–∞–∫–∞\n{DogPhoto}")


@bot.message_handler(commands=['ege_task'])
def call_ege_task(msg):
    bot.reply_to(msg, '–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±–∏—Ä–µ—à—å?', reply_markup=gen_markup_ege_type())
    usr_update(str(msg.from_user.id), {'ege_choose_state': 1})


@bot.message_handler(commands=['start'])
def send_welcome(msg):
    bot.send_message(msg.chat.id, 'ü•≥')
    # bot.reply_to(msg, f'–¥–∞—Ä–æ–≤–∞ –∫–∞—Ä–æ–≤–∞\nID {msg.from_user.id}')
    bot.reply_to(msg, f'–ü—Ä–∏–≤–µ—Ç!')
    usr_enlist(str(msg.from_user.id))


# @bot.message_handler(commands=['info'])
# def send_help(msg):
#     bot.reply_to(msg, f"—Ä–∞–∑—Ä–∞–± - https://instagram.com/therock\n —Ä–∞–Ω–¥–æ–º –∑–∞–¥–∞—á–∞ –ø–æ –µ–≥—ç - /ege_task\n"
#                       f"—å–∂—å—å–∂–∂—å—å—å - /random\n—Ç–µ—Å—Ç–∏—Ç—å –ø—Ä–∏–∫–æ–ª—ã —Ä–∂–∞–∫–∏ - —Ç–µ—Å—Ç\n–∫–æ—à–∫–∞ –∏–ª–∏ —Å–æ–±–∞–∫–∞ - /cat /dog\n"
#                       f"—Ç–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞—á–µ - /ege_theory (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    # bot.send_message(msg.chat.id, f"||spoiler||", parse_mode='MarkdownV2')


def rand_ege_question(msg, ege_link, curr_num, all_nums):
    bot.send_message(msg.chat.id, 'üßê')
    search1 = bot.send_message(msg.chat.id,
                               f'–∏—â–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é {usr_get(str(msg.from_user.id), "ege_num")}—É—é –∑–∞–¥–∞—á—É –ø–æ '
                               f'{ege_names[usr_get(str(msg.from_user.id), "ege_type")]} '
                               f'–ø–¥–∂–∏\n—ç—Ç–æ {curr_num} –∑–∞–¥–∞—á–∞ –∏–∑ {all_nums}\n'
                               f'–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è...')
    print('I\'m tryin to parse....')
    usr_update(str(msg.from_user.id), {'ege_choose_state': 7})  # —Ö–∑ –ø—Ä–æ—Å—Ç–æ –±–ª–æ—á–∏—Ç—å –≤–≤–æ–¥, –º–± –ø—Ä–æ–∫–∞—Ç–∏—Ç
    if ege_link == 'INDEX_ERR':
        print('–æ—à–∏–±–∫:', 'PARSE FAILURE')
        bot.reply_to(msg, f'–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, —è —Å–ª–æ–º–∞–ª—Å—è –ª–æ–ª')
    else:
        rand_num = random.randint(204, 863)
        get_website_screenshot(ege_link, usr_get(str(msg.from_user.id), "ege_type"),
                               msg.from_user.id, rand_num)
        bot.edit_message_text(chat_id=search1.chat.id, message_id=search1.message_id, text='–ì–æ—Ç–æ–≤–æ!')
        bot.send_photo(msg.chat.id, photo=open("tmp_pics\\" + usr_get(str(msg.from_user.id),
                                                       "ege_pic_name"), 'rb'))
        bot.send_message(msg.chat.id, f'<a href="{ege_link}"><b>–†–ï–®–ï–ù–ò–ï –ó–ê–î–ê–ß–ò ‚Ññ'
                                      f'{usr_get(str(msg.from_user.id), "ege_num")}</b></a>',
                         parse_mode='HTML', disable_web_page_preview=True)
        time.sleep(1)
        print('DELETING IMAGE...')
        time.sleep(1)
        os.remove("tmp_pics\\" + f'task-{usr_get(str(msg.from_user.id), "ege_type")}-'
                  f'{msg.from_user.id}_{rand_num}.png')
        usr_update(str(msg.from_user.id), {'ege_pic_name': 'error_pic.png'})
    bot.send_sticker(msg.chat.id, "https://i.ibb.co/y5cY6L4/SHKA.webp")
    usr_update(str(msg.from_user.id), {'ege_choose_state': 0})


@bot.message_handler(regexp="–±–±")
def echo_message2(msg):
    bot.send_message(msg.chat.id, '–±–±')
    exit('EMERGENCY EXIT')


@bot.message_handler(commands=['random'])
def random_absolute(msg):
    bot.send_message(msg.chat.id, '—è –Ω–µ –∑–Ω–∞—é —á–µ —ç—Ç–æ')
    stks = ['https://i.ibb.co/ww4HmYK/shka-bored.webp', 'https://i.ibb.co/98gGPKB/tire1-Fe-ZUo-I.webp']
    bot.send_sticker(msg.chat.id, random.choice(stks))
    time.sleep(random.randint(1, 5))
    bot.send_message(msg.chat.id, random.choice(lol))


@bot.message_handler()
def check_commands(msg):
    global ege_links
    # –Ω–∞–∑–∞–¥ –ø–µ—Ä–µ–º–æ—Ç–∫–∞
    if msg.text == "üîô –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é" or msg.text == "üîô –Ω–∞–∑–∞–¥" or msg.text == '!–Ω–∞–∑–∞–¥':
        markup_type = clear_markups()
        if usr_get(str(msg.from_user.id), "ege_choose_state") - 1 <= 0:
            usr_update(str(msg.from_user.id), {'ege_choose_state': 0})
            markup_type = clear_markups()

        elif usr_get(str(msg.from_user.id), "ege_choose_state") - 1 == 1 \
                or usr_get(str(msg.from_user.id), "ege_choose_state") - 1 == 4:
            n = usr_get(str(msg.from_user.id), "ege_choose_state") - 1
            usr_update(str(msg.from_user.id), {'ege_choose_state': n})
            markup_type = gen_markup_ege_type()

        elif usr_get(str(msg.from_user.id), "ege_choose_state") == 3:
            n = usr_get(str(msg.from_user.id), "ege_choose_state") - 1
            usr_update(str(msg.from_user.id), {'ege_choose_state': n})
            markup_type = gen_markup_ege_18() if \
                usr_get(str(msg.from_user.id), "ege_type") == 'math' else gen_markup_ege_27()
        bot.send_message(msg.chat.id, '–ª–∞–¥—ã ‚úÖ', reply_markup=markup_type)

    # –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –µ–≥—ç
    elif msg.text.isdigit():
        if int(msg.text) <= ege_types_len[usr_get(str(msg.from_user.id), "ege_type")]:
            usr_update(str(msg.from_user.id), {'ege_num': int(msg.text)})
            if usr_get(str(msg.from_user.id), "ege_choose_state") == 2:
                bot.send_message(msg.chat.id, '–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥', reply_markup=clear_markups())
                ege_links = parse_by_num(usr_get(str(msg.from_user.id), "ege_num"),
                                         usr_get(str(msg.from_user.id), "ege_type"))
                bot.send_message(msg.chat.id, f'–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–∫–∏–Ω—É—Ç—å?\n–û—Ç 1 –¥–æ {len(ege_links)}\n'
                                              f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—à–∏ —Å \'!\'\n–ø—Ä–∏–º–µ—Ä: !5 - —è —Å–∫–∏–Ω—É 5 –∑–∞–¥–∞—á, '
                                              f'!–Ω–∞–∑–∞–¥ - –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–µ—Ä–∞')
                usr_update(str(msg.from_user.id), {'ege_choose_state': 3})
            elif usr_get(str(msg.from_user.id), "ege_choose_state") == 5:
                bot.send_message(msg.chat.id,
                                 f'–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—é —Ç–µ–æ—Ä–∏—é –º–æ–≥—É –¥–∞—Ç—å\n'
                                 f'{parsy_by_theory(usr_get(str(msg.from_user.id), "ege_num"), usr_get(str(msg.from_user.id), "ege_type"))}',
                                 reply_markup=clear_markups())
                usr_update(str(msg.from_user.id), {'ege_choose_state': 0})
            else:
                bot.send_message(msg.chat.id, f'–æ—à–∏–±–∫–∞ {usr_get(str(msg.from_user.id), "ege_num")}',
                                 reply_markup=clear_markups())
        elif usr_get(str(msg.from_user.id), "ege_choose_state") == 2:
            bot.send_message(msg.chat.id, '—Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –µ–≥—ç –Ω–µ—Çü•∫')

    # –≤—Å–µ —á—Ç–æ –Ω–∏–∂–µ —ç—Ç–æ –∫–∞–∫–æ–π –ø—Ä–¥–º–µ—Ç –º—ã –≤—ã–±—Ä–∞–ª–∏ >>> ege_type
    elif msg.text == "üìó–†—É—Å—Å–∫–∏–π":
        usr_update(str(msg.from_user.id), {'ege_type': 'rus'})
        if usr_get(str(msg.from_user.id), "ege_choose_state") == 1:
            bot.send_message(msg.chat.id, '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–∞–∫–æ–π?', reply_markup=gen_markup_ege_27())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 2})
        elif usr_get(str(msg.from_user.id), "ege_choose_state") == 4:
            bot.send_message(msg.chat.id, '–∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?\n–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=gen_markup_ege_27())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 5})

    elif msg.text == "üìô–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
        usr_update(str(msg.from_user.id), {'ege_type': 'math'})
        if usr_get(str(msg.from_user.id), "ege_choose_state") == 1:
            bot.send_message(msg.chat.id, '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–∞–∫–æ–π?', reply_markup=gen_markup_ege_18())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 2})
        elif usr_get(str(msg.from_user.id), "ege_choose_state") == 4:
            bot.send_message(msg.chat.id, '–∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?\n–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=gen_markup_ege_18())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 5})

    elif msg.text == "üìò–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
        usr_update(str(msg.from_user.id), {'ege_type': 'inf'})
        if usr_get(str(msg.from_user.id), "ege_choose_state") == 1:
            bot.send_message(msg.chat.id, '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–∞–∫–æ–π?', reply_markup=gen_markup_ege_27())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 2})
        elif usr_get(str(msg.from_user.id), "ege_choose_state") == 4:
            bot.send_message(msg.chat.id, '–∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?\n–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=gen_markup_ege_27())
            usr_update(str(msg.from_user.id), {'ege_choose_state': 5})
    elif msg.text[0] == '!' and msg.text[1:].isdigit() and \
            usr_get(str(msg.from_user.id), "ege_choose_state") == 3:
        task_send_amount = int(msg.text[1:])
        if task_send_amount > len(ege_links):
            bot.send_message(msg.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ')
        else:
            for task_num in range(task_send_amount):
                rand_ege_question(msg, ege_links[task_num]['link'], task_num + 1, task_send_amount)
    else:
        bot.send_message(msg.chat.id, random.choice(idk))


bot.infinity_polling()
